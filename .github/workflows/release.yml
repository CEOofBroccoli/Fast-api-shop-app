name: Release and Deploy

on:
  push:
    tags:
      - "v*.*.*"

env:
  PYTHON_VERSION: "3.12"

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest

    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" --no-merges)
          else
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## Changes in ${{ steps.get_version.outputs.VERSION }}

            ${{ steps.changelog.outputs.CHANGELOG }}

            ## Docker Image
            ```bash
            docker pull ${{ secrets.DOCKER_USERNAME }}/fastapi-shop-app:${{ steps.get_version.outputs.VERSION }}
            ```
          draft: false
          prerelease: false

  build-and-push:
    name: Build and Push Release Image
    runs-on: ubuntu-latest
    needs: [create-release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/fastapi-shop-app:${{ steps.get_version.outputs.VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/fastapi-shop-app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-and-push]
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Deploy to production
        run: |
          echo "Deploying version ${{ steps.get_version.outputs.VERSION }} to production..."
          # Add your production deployment commands here
          # Examples:
          # - Deploy to Kubernetes
          # - Deploy to AWS ECS
          # - Deploy to cloud providers
          # - Update docker-compose on production server

      - name: Health check
        run: |
          # Add health check commands here
          echo "Running health checks..."
          # Example: curl -f https://your-api.com/health

      - name: Notify team
        run: |
          echo "Production deployment of ${{ steps.get_version.outputs.VERSION }} completed successfully! ðŸš€"
          # Add notification logic here (Slack, email, etc.)
