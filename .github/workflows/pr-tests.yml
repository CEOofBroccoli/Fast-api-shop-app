name: Pull Request Tests

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  PYTHON_VERSION: "3.13"

jobs:
  pr-tests:
    name: PR Validation
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:6-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-asyncio pytest-cov httpx flake8 black isort

      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=postgresql://testuser:testpassword@localhost:5432/testdb" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=test-jwt-secret-key-for-ci" >> $GITHUB_ENV
          echo "REDIS_HOST=localhost" >> $GITHUB_ENV
          echo "REDIS_PORT=6379" >> $GITHUB_ENV
          echo "REDIS_PASSWORD=" >> $GITHUB_ENV
          echo "DEBUG=1" >> $GITHUB_ENV
          echo "ENVIRONMENT=testing" >> $GITHUB_ENV

      - name: Check code formatting
        run: |
          black --check backend/ || (echo "Code formatting check failed. Run 'black backend/' to fix." && exit 1)

      - name: Check import sorting
        run: |
          isort --check-only backend/ || (echo "Import sorting check failed. Run 'isort backend/' to fix." && exit 1)

      - name: Lint code
        run: |
          flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
        run: |
          python -m alembic upgrade head

      - name: Run tests
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          JWT_SECRET_KEY: test-jwt-secret-key-for-ci
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: ""
          DEBUG: 1
          ENVIRONMENT: testing
          LOG_LEVEL: INFO
        run: |
          python -m pytest tests/ -v --cov=backend

      - name: Comment PR with test results
        uses: actions/github-script@v6
        if: always() && github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { owner, repo } = context.repo;
              const pull_number = context.payload.pull_request.number;
              const conclusion = '${{ job.status }}';
              const body = conclusion === 'success' 
                ? '✅ All tests passed! This PR is ready for review.'
                : '❌ Some tests failed. Please check the workflow logs for details.';

              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body
              });
            } catch (error) {
              console.log('Failed to comment on PR:', error.message);
            }
